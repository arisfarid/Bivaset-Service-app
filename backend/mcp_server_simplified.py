#!/usr/bin/env python3
"""
Simplified Bivaset MCP Server - Model Context Protocol Server for AI Database Access
ÿ≥ÿ±Ÿàÿ± MCP ÿ≥ÿßÿØŸá‚Äåÿ¥ÿØŸá ÿ®€åŸàÿßÿ≥ÿ™ - ÿ≥ÿ±Ÿàÿ± Ÿæÿ±Ÿàÿ™⁄©ŸÑ ÿ≤ŸÖ€åŸÜŸá ŸÖÿØŸÑ ÿ®ÿ±ÿß€å ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸáŸàÿ¥ ŸÖÿµŸÜŸàÿπ€å ÿ®Ÿá ÿØ€åÿ™ÿßÿ®€åÿ≥

ÿß€åŸÜ ÿ≥ÿ±Ÿàÿ± ŸÜÿ≥ÿÆŸá ÿ≥ÿßÿØŸá‚Äåÿ¥ÿØŸá ÿßÿ≥ÿ™ ⁄©Ÿá ÿ®ÿØŸàŸÜ GDAL Ÿà ÿßŸÖ⁄©ÿßŸÜÿßÿ™ ÿ¨ÿ∫ÿ±ÿßŸÅ€åÿß€å€å ⁄©ÿßÿ± ŸÖ€å‚Äå⁄©ŸÜÿØ.
"""

import asyncio
import json
import logging
import os
import sys
from datetime import datetime, date
from decimal import Decimal
from typing import Any, Dict, List, Optional

# ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ ŸÖÿ≥€åÿ± Django ÿ®Ÿá sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# ÿ™ŸÜÿ∏€åŸÖÿßÿ™ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')

# Import Django without GIS
import django
from django.conf import settings

# Temporarily disable GIS apps
if hasattr(settings, 'INSTALLED_APPS'):
    # Remove GIS from installed apps temporarily
    gis_apps = ['django.contrib.gis']
    settings.INSTALLED_APPS = [app for app in settings.INSTALLED_APPS if app not in gis_apps]

try:
    django.setup()
except Exception as e:
    print(f"Django setup failed: {e}")
    # Try basic Django setup without GIS
    import django.db
    
from django.db import connection
from mcp.server import Server
from mcp.types import (
    Resource, Tool, TextContent, 
    CallToolResult, ListResourcesResult, ListToolsResult, ReadResourceResult
)

# ÿ™ŸÜÿ∏€åŸÖ ŸÑÿß⁄Ø‚Äå⁄Ø€åÿ±€å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mcp_server.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ŸÖÿ≠ÿØŸàÿØ€åÿ™‚ÄåŸáÿß€å ÿßŸÖŸÜ€åÿ™€å
MAX_QUERY_RESULTS = 100
ALLOWED_TABLES = ['app_user', 'app_project', 'app_category', 'app_proposal', 'app_projectfile']
READONLY_MODE = True  # ÿ™ŸÜŸáÿß ÿÆŸàÿßŸÜÿØŸÜ - ÿ®ÿ±ÿß€å ÿßŸÖŸÜ€åÿ™ ÿ®€åÿ¥ÿ™ÿ±

class SimplifiedBivasetMCPServer:
    """ÿ≥ÿ±Ÿàÿ± MCP ÿ≥ÿßÿØŸá‚Äåÿ¥ÿØŸá ÿ®ÿ±ÿß€å ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸáŸàÿ¥ ŸÖÿµŸÜŸàÿπ€å ÿ®Ÿá ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿ®€åŸàÿßÿ≥ÿ™"""
    
    def __init__(self):
        self.server = Server("bivaset-mcp-server")
        self.setup_handlers()
        logger.info("üöÄ Simplified Bivaset MCP Server initialized")
        
    def setup_handlers(self):
        """ÿ™ŸÜÿ∏€åŸÖ handler Ÿáÿß€å ÿ≥ÿ±Ÿàÿ±"""
        
        # Resource handlers
        @self.server.list_resources()
        async def list_resources() -> ListResourcesResult:
            """ŸÑ€åÿ≥ÿ™ ŸÖŸÜÿßÿ®ÿπ ŸÖŸàÿ¨ŸàÿØ"""
            resources = [
                Resource(
                    uri="bivaset://database/users",
                    name="⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ≥€åÿ≥ÿ™ŸÖ",
                    description="ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ¥ÿßŸÖŸÑ ⁄©ÿßÿ±ŸÅÿ±ŸÖÿß Ÿà ŸÖÿ¨ÿ±€å",
                    mimeType="application/json"
                ),
                Resource(
                    uri="bivaset://database/projects",
                    name="Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿß€å ÿ≥€åÿ≥ÿ™ŸÖ",
                    description="ÿ™ŸÖÿßŸÖ Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿß€å ÿ´ÿ®ÿ™‚Äåÿ¥ÿØŸá ÿØÿ± ÿ≥€åÿ≥ÿ™ŸÖ",
                    mimeType="application/json"
                ),
                Resource(
                    uri="bivaset://database/categories",
                    name="ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å ÿÆÿØŸÖÿßÿ™",
                    description="ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å‚ÄåŸáÿß€å ŸÖÿÆÿ™ŸÑŸÅ ÿÆÿØŸÖÿßÿ™",
                    mimeType="application/json"
                ),
                Resource(
                    uri="bivaset://database/proposals",
                    name="Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™ ŸÖÿ¨ÿ±€åÿßŸÜ",
                    description="Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™ ÿßÿ±ÿ≥ÿßŸÑ€å ŸÖÿ¨ÿ±€åÿßŸÜ ÿ®ÿ±ÿß€å Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿß",
                    mimeType="application/json"
                ),
                Resource(
                    uri="bivaset://database/stats",
                    name="ÿ¢ŸÖÿßÿ± ÿ≥€åÿ≥ÿ™ŸÖ",
                    description="ÿ¢ŸÖÿßÿ± ⁄©ŸÑ€å Ÿà ÿ™ÿ≠ŸÑ€åŸÑ€å ÿ≥€åÿ≥ÿ™ŸÖ",
                    mimeType="application/json"
                )
            ]
            return ListResourcesResult(resources=resources)

        @self.server.read_resource()
        async def read_resource(uri: str) -> ReadResourceResult:
            """ÿÆŸàÿßŸÜÿØŸÜ ŸÖÿ≠ÿ™Ÿàÿß€å ŸÖŸÜÿßÿ®ÿπ"""
            logger.info(f"üìñ Reading resource: {uri}")
            
            try:
                if uri == "bivaset://database/users":
                    data = await self.get_users_data()
                elif uri == "bivaset://database/projects":
                    data = await self.get_projects_data()
                elif uri == "bivaset://database/categories":
                    data = await self.get_categories_data()
                elif uri == "bivaset://database/proposals":
                    data = await self.get_proposals_data()
                elif uri == "bivaset://database/stats":
                    data = await self.get_stats_data()
                else:
                    raise ValueError(f"Unknown resource: {uri}")
                
                return ReadResourceResult(
                    contents=[
                        TextContent(
                            type="text",
                            text=json.dumps(data, ensure_ascii=False, indent=2, default=str)
                        )
                    ]
                )
            
            except Exception as e:
                logger.error(f"‚ùå Error reading resource {uri}: {e}")
                return ReadResourceResult(
                    contents=[
                        TextContent(
                            type="text",
                            text=f"ÿÆÿ∑ÿß ÿØÿ± ÿÆŸàÿßŸÜÿØŸÜ ŸÖŸÜÿ®ÿπ: {str(e)}"
                        )
                    ]
                )

        # Tool handlers
        @self.server.list_tools()
        async def list_tools() -> ListToolsResult:
            """ŸÑ€åÿ≥ÿ™ ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å ŸÖŸàÿ¨ŸàÿØ"""
            tools = [
                Tool(
                    name="query_database",
                    description="ÿßÿ¨ÿ±ÿß€å ⁄©Ÿàÿ¶ÿ±€å ÿßŸÖŸÜ ÿ±Ÿà€å ÿØ€åÿ™ÿßÿ®€åÿ≥ (ŸÅŸÇÿ∑ SELECT)",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "⁄©Ÿàÿ¶ÿ±€å SQL ÿ®ÿ±ÿß€å ÿßÿ¨ÿ±ÿß (ŸÅŸÇÿ∑ SELECT ŸÖÿ¨ÿßÿ≤ ÿßÿ≥ÿ™)"
                            }
                        },
                        "required": ["query"]
                    }
                ),
                Tool(
                    name="get_project_details",
                    description="ÿØÿ±€åÿßŸÅÿ™ ÿ¨ÿ≤ÿ¶€åÿßÿ™ ⁄©ÿßŸÖŸÑ €å⁄© Ÿæÿ±Ÿà⁄òŸá",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "project_id": {
                                "type": "integer",
                                "description": "ÿ¥ŸÜÿßÿ≥Ÿá Ÿæÿ±Ÿà⁄òŸá"
                            }
                        },
                        "required": ["project_id"]
                    }
                ),
                Tool(
                    name="search_projects",
                    description="ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿØÿ± Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿß",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "ŸÖÿ™ŸÜ ÿ¨ÿ≥ÿ™ÿ¨Ÿà"
                            },
                            "status": {
                                "type": "string",
                                "description": "Ÿàÿ∂ÿπ€åÿ™ Ÿæÿ±Ÿà⁄òŸá (ÿßÿÆÿ™€åÿßÿ±€å)",
                                "enum": ["ACTIVE", "COMPLETED", "CANCELLED"]
                            },
                            "category": {
                                "type": "string",
                                "description": "ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å (ÿßÿÆÿ™€åÿßÿ±€å)"
                            }
                        },
                        "required": ["query"]
                    }
                )
            ]
            return ListToolsResult(tools=tools)

        @self.server.call_tool()
        async def call_tool(name: str, arguments: Dict[str, Any]) -> CallToolResult:
            """ÿßÿ¨ÿ±ÿß€å ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß"""
            logger.info(f"üîß Calling tool: {name} with args: {arguments}")
            
            try:
                if name == "query_database":
                    result = await self.execute_safe_query(arguments["query"])
                elif name == "get_project_details":
                    result = await self.get_project_details(arguments["project_id"])
                elif name == "search_projects":
                    result = await self.search_projects(
                        arguments["query"],
                        arguments.get("status"),
                        arguments.get("category")
                    )
                else:
                    raise ValueError(f"Unknown tool: {name}")
                
                return CallToolResult(
                    content=[
                        TextContent(
                            type="text",
                            text=json.dumps(result, ensure_ascii=False, indent=2, default=str)
                        )
                    ],
                    isError=False
                )
            
            except Exception as e:
                logger.error(f"‚ùå Error calling tool {name}: {e}")
                return CallToolResult(
                    content=[
                        TextContent(
                            type="text",
                            text=f"ÿÆÿ∑ÿß ÿØÿ± ÿßÿ¨ÿ±ÿß€å ÿßÿ®ÿ≤ÿßÿ±: {str(e)}"
                        )
                    ],
                    isError=True
                )

    async def execute_safe_query(self, query: str) -> Dict[str, Any]:
        """ÿßÿ¨ÿ±ÿß€å ⁄©Ÿàÿ¶ÿ±€å ÿßŸÖŸÜ"""
        # ÿ®ÿ±ÿ±ÿ≥€å ÿßŸÖŸÜ€åÿ™ ⁄©Ÿàÿ¶ÿ±€å
        query_lower = query.lower().strip()
        
        # ŸÅŸÇÿ∑ SELECT ŸÖÿ¨ÿßÿ≤ ÿßÿ≥ÿ™
        if not query_lower.startswith('select'):
            raise ValueError("ŸÅŸÇÿ∑ ⁄©Ÿàÿ¶ÿ±€å‚ÄåŸáÿß€å SELECT ŸÖÿ¨ÿßÿ≤ Ÿáÿ≥ÿ™ŸÜÿØ")
        
        # ⁄©ŸÑŸÖÿßÿ™ ŸÖŸÖŸÜŸàÿπ
        forbidden_words = ['drop', 'delete', 'update', 'insert', 'alter', 'create', 'truncate']
        if any(word in query_lower for word in forbidden_words):
            raise ValueError("⁄©Ÿàÿ¶ÿ±€å ÿ≠ÿßŸà€å ÿπŸÖŸÑ€åÿßÿ™ ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤ ÿßÿ≥ÿ™")
        
        # ŸÖÿ≠ÿØŸàÿØ€åÿ™ ÿ¨ÿØÿßŸàŸÑ
        table_found = False
        for table in ALLOWED_TABLES:
            if table in query_lower:
                table_found = True
                break
        
        if not table_found:
            raise ValueError(f"ŸÅŸÇÿ∑ ÿ¨ÿØÿßŸàŸÑ ŸÖÿ¨ÿßÿ≤ ŸÇÿßÿ®ŸÑ ÿØÿ≥ÿ™ÿ±ÿ≥€å Ÿáÿ≥ÿ™ŸÜÿØ: {', '.join(ALLOWED_TABLES)}")
        
        # ÿßÿ¨ÿ±ÿß€å ⁄©Ÿàÿ¶ÿ±€å
        with connection.cursor() as cursor:
            cursor.execute(query)
            columns = [col[0] for col in cursor.description]
            rows = cursor.fetchmany(MAX_QUERY_RESULTS)
            
            return {
                'columns': columns,
                'rows': rows,
                'count': len(rows),
                'limited': len(rows) == MAX_QUERY_RESULTS
            }

    async def get_users_data(self) -> Dict[str, Any]:
        """ÿØÿ±€åÿßŸÅÿ™ ÿØÿßÿØŸá‚ÄåŸáÿß€å ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ"""
        query = """
        SELECT id, name, phone, user_type, created_at, is_active 
        FROM app_user 
        ORDER BY created_at DESC 
        LIMIT %s
        """
        
        with connection.cursor() as cursor:
            cursor.execute(query, [MAX_QUERY_RESULTS])
            columns = [col[0] for col in cursor.description]
            rows = cursor.fetchall()
            
            users = []
            for row in rows:
                user_dict = dict(zip(columns, row))
                users.append(user_dict)
            
            return {
                'users': users,
                'total_count': len(users),
                'timestamp': datetime.now().isoformat()
            }

    async def get_projects_data(self) -> Dict[str, Any]:
        """ÿØÿ±€åÿßŸÅÿ™ ÿØÿßÿØŸá‚ÄåŸáÿß€å Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿß"""
        query = """
        SELECT p.id, p.title, p.description, p.budget, p.status, 
               p.service_location, p.created_at, p.deadline_date,
               u.name as user_name, u.phone as user_phone,
               c.name as category_name
        FROM app_project p
        LEFT JOIN app_user u ON p.user_id = u.id
        LEFT JOIN app_category c ON p.category_id = c.id
        ORDER BY p.created_at DESC 
        LIMIT %s
        """
        
        with connection.cursor() as cursor:
            cursor.execute(query, [MAX_QUERY_RESULTS])
            columns = [col[0] for col in cursor.description]
            rows = cursor.fetchall()
            
            projects = []
            for row in rows:
                project_dict = dict(zip(columns, row))
                projects.append(project_dict)
            
            return {
                'projects': projects,
                'total_count': len(projects),
                'timestamp': datetime.now().isoformat()
            }

    async def get_categories_data(self) -> Dict[str, Any]:
        """ÿØÿ±€åÿßŸÅÿ™ ÿØÿßÿØŸá‚ÄåŸáÿß€å ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å‚ÄåŸáÿß"""
        query = """
        SELECT id, name, description, created_at,
               (SELECT COUNT(*) FROM app_project WHERE category_id = app_category.id) as project_count
        FROM app_category 
        ORDER BY name
        """
        
        with connection.cursor() as cursor:
            cursor.execute(query)
            columns = [col[0] for col in cursor.description]
            rows = cursor.fetchall()
            
            categories = []
            for row in rows:
                category_dict = dict(zip(columns, row))
                categories.append(category_dict)
            
            return {
                'categories': categories,
                'total_count': len(categories),
                'timestamp': datetime.now().isoformat()
            }

    async def get_proposals_data(self) -> Dict[str, Any]:
        """ÿØÿ±€åÿßŸÅÿ™ ÿØÿßÿØŸá‚ÄåŸáÿß€å Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™"""
        query = """
        SELECT pr.id, pr.proposed_price, pr.description, pr.delivery_time,
               pr.status, pr.created_at,
               p.title as project_title, p.budget as project_budget,
               u.name as contractor_name, u.phone as contractor_phone
        FROM app_proposal pr
        LEFT JOIN app_project p ON pr.project_id = p.id
        LEFT JOIN app_user u ON pr.contractor_id = u.id
        ORDER BY pr.created_at DESC 
        LIMIT %s
        """
        
        with connection.cursor() as cursor:
            cursor.execute(query, [MAX_QUERY_RESULTS])
            columns = [col[0] for col in cursor.description]
            rows = cursor.fetchall()
            
            proposals = []
            for row in rows:
                proposal_dict = dict(zip(columns, row))
                proposals.append(proposal_dict)
            
            return {
                'proposals': proposals,
                'total_count': len(proposals),
                'timestamp': datetime.now().isoformat()
            }

    async def get_stats_data(self) -> Dict[str, Any]:
        """ÿØÿ±€åÿßŸÅÿ™ ÿ¢ŸÖÿßÿ± ÿ≥€åÿ≥ÿ™ŸÖ"""
        stats_queries = {
            'total_users': "SELECT COUNT(*) FROM app_user",
            'active_users': "SELECT COUNT(*) FROM app_user WHERE is_active = true",
            'total_projects': "SELECT COUNT(*) FROM app_project",
            'active_projects': "SELECT COUNT(*) FROM app_project WHERE status = 'ACTIVE'",
            'completed_projects': "SELECT COUNT(*) FROM app_project WHERE status = 'COMPLETED'",
            'total_proposals': "SELECT COUNT(*) FROM app_proposal",
            'accepted_proposals': "SELECT COUNT(*) FROM app_proposal WHERE status = 'ACCEPTED'",
            'total_categories': "SELECT COUNT(*) FROM app_category"
        }
        
        stats = {}
        with connection.cursor() as cursor:
            for stat_name, query in stats_queries.items():
                cursor.execute(query)
                result = cursor.fetchone()
                stats[stat_name] = result[0] if result else 0
        
        # ÿ¢ŸÖÿßÿ± ÿ®ŸàÿØÿ¨Ÿá
        budget_query = """
        SELECT 
            AVG(budget) as avg_budget,
            MIN(budget) as min_budget,
            MAX(budget) as max_budget,
            SUM(budget) as total_budget
        FROM app_project 
        WHERE budget IS NOT NULL
        """
        
        with connection.cursor() as cursor:
            cursor.execute(budget_query)
            budget_row = cursor.fetchone()
            if budget_row:
                stats.update({
                    'avg_budget': float(budget_row[0]) if budget_row[0] else 0,
                    'min_budget': float(budget_row[1]) if budget_row[1] else 0,
                    'max_budget': float(budget_row[2]) if budget_row[2] else 0,
                    'total_budget': float(budget_row[3]) if budget_row[3] else 0
                })
        
        return {
            'stats': stats,
            'timestamp': datetime.now().isoformat()
        }

    async def get_project_details(self, project_id: int) -> Dict[str, Any]:
        """ÿØÿ±€åÿßŸÅÿ™ ÿ¨ÿ≤ÿ¶€åÿßÿ™ ⁄©ÿßŸÖŸÑ Ÿæÿ±Ÿà⁄òŸá"""
        # ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿßÿµŸÑ€å Ÿæÿ±Ÿà⁄òŸá
        project_query = """
        SELECT p.*, u.name as user_name, u.phone as user_phone, u.user_type,
               c.name as category_name, c.description as category_description
        FROM app_project p
        LEFT JOIN app_user u ON p.user_id = u.id
        LEFT JOIN app_category c ON p.category_id = c.id
        WHERE p.id = %s
        """
        
        with connection.cursor() as cursor:
            cursor.execute(project_query, [project_id])
            columns = [col[0] for col in cursor.description]
            row = cursor.fetchone()
            
            if not row:
                raise ValueError(f"Ÿæÿ±Ÿà⁄òŸá ÿ®ÿß ÿ¥ŸÜÿßÿ≥Ÿá {project_id} €åÿßŸÅÿ™ ŸÜÿ¥ÿØ")
            
            project = dict(zip(columns, row))
        
        # Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™ Ÿæÿ±Ÿà⁄òŸá
        proposals_query = """
        SELECT pr.*, u.name as contractor_name, u.phone as contractor_phone
        FROM app_proposal pr
        LEFT JOIN app_user u ON pr.contractor_id = u.id
        WHERE pr.project_id = %s
        ORDER BY pr.created_at DESC
        """
        
        with connection.cursor() as cursor:
            cursor.execute(proposals_query, [project_id])
            columns = [col[0] for col in cursor.description]
            proposal_rows = cursor.fetchall()
            
            proposals = []
            for row in proposal_rows:
                proposal_dict = dict(zip(columns, row))
                proposals.append(proposal_dict)
        
        # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å Ÿæÿ±Ÿà⁄òŸá
        files_query = """
        SELECT * FROM app_projectfile 
        WHERE project_id = %s
        ORDER BY id
        """
        
        with connection.cursor() as cursor:
            cursor.execute(files_query, [project_id])
            columns = [col[0] for col in cursor.description]
            file_rows = cursor.fetchall()
            
            files = []
            for row in file_rows:
                file_dict = dict(zip(columns, row))
                files.append(file_dict)
        
        return {
            'project': project,
            'proposals': proposals,
            'files': files,
            'timestamp': datetime.now().isoformat()
        }

    async def search_projects(self, query: str, status: Optional[str] = None, category: Optional[str] = None) -> Dict[str, Any]:
        """ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿØÿ± Ÿæÿ±Ÿà⁄òŸá‚ÄåŸáÿß"""
        where_conditions = ["(p.title ILIKE %s OR p.description ILIKE %s)"]
        params = [f"%{query}%", f"%{query}%"]
        
        if status:
            where_conditions.append("p.status = %s")
            params.append(status)
        
        if category:
            where_conditions.append("c.name ILIKE %s")
            params.append(f"%{category}%")
        
        search_query = f"""
        SELECT p.id, p.title, p.description, p.budget, p.status, 
               p.service_location, p.created_at, p.deadline_date,
               u.name as user_name, u.phone as user_phone,
               c.name as category_name
        FROM app_project p
        LEFT JOIN app_user u ON p.user_id = u.id
        LEFT JOIN app_category c ON p.category_id = c.id
        WHERE {' AND '.join(where_conditions)}
        ORDER BY p.created_at DESC 
        LIMIT %s
        """
        
        params.append(MAX_QUERY_RESULTS)
        
        with connection.cursor() as cursor:
            cursor.execute(search_query, params)
            columns = [col[0] for col in cursor.description]
            rows = cursor.fetchall()
            
            projects = []
            for row in rows:
                project_dict = dict(zip(columns, row))
                projects.append(project_dict)
        
        return {
            'search_query': query,
            'filters': {'status': status, 'category': category},
            'projects': projects,
            'total_found': len(projects),
            'timestamp': datetime.now().isoformat()
        }

    async def run(self):
        """ÿßÿ¨ÿ±ÿß€å ÿ≥ÿ±Ÿàÿ± MCP"""
        logger.info("üéØ Starting Simplified Bivaset MCP Server...")
        
        # ÿßÿ¨ÿ±ÿß€å ÿ≥ÿ±Ÿàÿ±
        async with self.server.stdio_server() as streams:
            await self.server.run(*streams)

async def main():
    """ÿ™ÿßÿ®ÿπ ÿßÿµŸÑ€å"""
    server = SimplifiedBivasetMCPServer()
    await server.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Server stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Server error: {e}")
        sys.exit(1)
